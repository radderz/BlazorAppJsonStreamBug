@page "/"
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveWebAssembly

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div>
    Time: @_time.ToString("yyyy MMM dd HH:mm:ss")
</div>

@code {

    DateTime _time { get; set; }

    JsonSerializerOptions _jsonSerializerOptionsStreaming = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            DefaultBufferSize = 128
        };

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StreamTime();
        }
    }

    public async Task StreamTime()
    {
        CancellationToken token = CancellationToken.None;

        while (true)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "api/Time");

                request.Options.Set(new HttpRequestOptionsKey<bool>("WebAssemblyEnableStreamingResponse"), true);

                using var httpClient = HttpClientFactory.CreateClient("Api");
                httpClient.Timeout = TimeSpan.FromHours(2);
                using HttpResponseMessage response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, token);

                response.EnsureSuccessStatusCode();

                using Stream responseStream = await response.Content.ReadAsStreamAsync(token);

                var timeEnumerable = (IAsyncEnumerable<DateTime>)JsonSerializer.DeserializeAsyncEnumerable<DateTime>(
                        responseStream,
                        _jsonSerializerOptionsStreaming,
                        token
                    );

                await foreach (DateTime time in timeEnumerable)
                {
                    _time = time;
                    StateHasChanged();
                }
            }
            catch (Exception err)
            {
                Console.WriteLine(err);
                await Task.Delay(1000);
            }
        }
    }
}
